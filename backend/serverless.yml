org: masonmini
app: risen-one-project
service: risen-one-project
frameworkVersion: '3'

custom:
  bioTableName: '${self:service}-bio-table-${sls:stage}'
  bioImagesS3Name: '${self:service}-bio-images-${sls:stage}'

provider:
  httpApi:
    name: ${self:service}-${sls:stage}
    cors:
      allowedHeaders:
        - 'code'
        - 'Authorization'

  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  profile: default
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
          Resource:
            - Fn::GetAtt: [ BioTable, Arn ]

functions:
  createBio:
    handler: createBio.createBio
    events:
      - httpApi:
          method: POST
          path: /createbio
    environment:
      BIO_TABLE: ${self:custom.bioTableName}
      BIO_IMAGES: ${self:custom.bioImagesS3Name}
    role: dynamoRole

  getBios:
    handler: getBios.getBios
    events:
      - httpApi:
          method: GET
          path: /bios
    environment:
      BIO_TABLE: ${self:custom.bioTableName}
      BIO_IMAGES: ${self:custom.bioImagesS3Name}
    role: dynamoRole
  
  getBio:
    handler: getBio.getBio
    events:
      - httpApi:
          method: GET
          path: /bio/{id}
    environment:
      BIO_TABLE: ${self:custom.bioTableName}
      BIO_IMAGES: ${self:custom.bioImagesS3Name}
    role: dynamoRole
  
  editBio:
    handler: editBio.editBio
    events:
      - httpApi:
          method: PUT
          path: /editbio/{id}
    environment:
      BIO_TABLE: ${self:custom.bioTableName}
      BIO_IMAGES: ${self:custom.bioImagesS3Name}
    role: dynamoRole
  
  getToken:
    handler: getToken.getToken
    events:
      - httpApi:
          method: GET
          path: /getToken

resources:
  Resources:
    dynamoRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: DynamoRoleBio
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: 
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dynamoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - Fn::GetAtt: [BioTable, Arn]
          - PolicyName: s3bucketPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource:
                    - Fn::Sub: arn:aws:s3:::${self:custom.bioImagesS3Name}/*

    BioTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.bioTableName}

    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bioImagesS3Name}
        Tags:
          - Key: ROBio
            Value: risen-one-bio

    Cognito:
      Type: AWS::Cognito::UserPool
      Properties:
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: 'verified_email'
              Priority: 1
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AliasAttributes:
          - 'email'
          - 'preferred_username'
        AutoVerifiedAttributes:
          - 'email'
        DeletionProtection: 'ACTIVE'
        DeviceConfiguration:
          ChallengeRequiredOnNewDevice: true
          DeviceOnlyRememberedOnUserPrompt: true
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
          # From: no-reply@verificationemail.com
          ReplyToEmailAddress: 'LCS56910@ucmo.edu'
        EnabledMfas:
          - SMS_MFA
        MfaConfiguration: OPTIONAL
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 60
        # SmsAuthenticationMessage: SMS authentication
        SmsConfiguration:
          ExternalId: 4de7af91-d43a-4f13-9fc3-e6be33bb7828
          SnsCallerArn: arn:aws:iam::569915834522:role/service-role/CognitoBioPageSMS
          SnsRegion: us-east-1
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - 'email'
        # UsernameAttributes:
        #   - email
        UsernameConfiguration:
          CaseSensitive: false
        UserPoolAddOns:
          AdvancedSecurityMode: AUDIT
        UserPoolName: BioPageUserPool
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          # SmsMessage: Here is your verification code